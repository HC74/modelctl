{{- $structName := .StructName}}{{ $dbName := .DBName }}{{ $hasKey := .HasKey -}}
{{- $idType:= .KeyType }}{{ $packageName := .Package }}{{$keyStructColumn := .KeyStructColumn}}{{$keyColumn := .KeyColumn}}
{{"// Package "}}{{$packageName}}{{" This file is automatically generated, will not be overwritten, and can be modified"}}
package {{$packageName}}

import (
    "reflect"
    "strings"
)

// InsertOne 插入一条数据
func (data *{{$structName}}) InsertOne() error {
    err := {{$dbName}}.Create(&data).Error
    if err != nil {
        return err
    }
    return nil
}

// Insert{{$structName}}Many 批量插入 @param batch:每批的数量
func Insert{{$structName}}Many(datas []*{{$structName}}, batch int) error {
    err := {{$dbName}}.CreateInBatches(datas, batch).Error
    if err != nil {
        return err
    }
    return nil
}
{{if ($hasKey)}}
// FindById 根据ID查找 @param id:唯一标识
func (data *{{$structName}}) FindById() error {
    err := {{$dbName}}.Where("{{$keyColumn}} = ?", data.{{$keyStructColumn}}).First(&data).Error
    if err != nil {
        return err
    }
    return nil
}

// UpdateById 根据ID查找 @param id:唯一标识
func (data *{{$structName}}) UpdateById() error {
    err := {{$dbName}}.Where("{{$keyColumn}} = ?", data.{{$keyStructColumn}}).First(&data).Error
    if err != nil {
        return err
    }
    err = {{$dbName}}.Save(&data).Error
    if err != nil {
        return err
    }
    return nil
}
{{end}}


// Paging{{$structName}} 分页
// @param pageNum: 页数
// @param pageSize: 每页大小
// @param orders: 排序
// @param maps: 条件
// @param args: 值
// @returns r1: 数据集 r2: 总页数 r3: 总数据量 r4: 异常
// maps and args 例如 maps: id = ? and args: 1
func Paging{{$structName}}(pageNum, pageSize int, orders string, maps interface{}, args ...interface{}) ([]*{{$structName}}, int, int64, error) {
    var (
        results    []*{{$structName}}
        err   error
        size  = pageSize
        total int64
    )
    if pageNum == 0 {
        panic("页数不能为0")
    }
    pageNum--
    if strings.TrimSpace(orders) == "" {
        {{$dbName}} = {{$dbName}}.Order(orders)
    }
    if reflect.ValueOf(maps).IsValid() && maps != "" {
        {{$dbName}} = {{$dbName}}.Where(maps, args...)
    }
    err = {{$dbName}}.Model({{$structName}}{}).Count(&total).Error
    if err != nil {
        return nil, 0, 0, err
    }
    totalPageNum := total / int64(pageSize)
    if total%int64(pageSize) != 0 {
        totalPageNum++
    }
    err = {{$dbName}}.Offset(pageNum * size).Limit(size).Find(&results).Error
    if err != nil {
        return nil, 0, 0, err
    }
    return results, int(totalPageNum), total, nil
}
