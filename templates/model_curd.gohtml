{{- $structName := .StructName}}{{ $dbName := .DBName }}{{ $hasKey := .HasKey -}}
{{- $idType:= .KeyType }}{{ $packageName := .Package -}}
{{"// Package "}}{{$packageName}}{{" This file is automatically generated, will not be overwritten, and can be modified"}}
package {{$packageName}}

import (
    "reflect"
    "strings"
)

// InsertOne 插入一条数据
func (data *{{$structName}}) InsertOne() error {
    err := {{$dbName}}.Create(&data).Error
    if err != nil {
        return err
    }
    return nil
}

// Insert{{$structName}}Many 批量插入 @param batch:每批的数量
func Insert{{$structName}}Many(datas []*{{$structName}}, batch int) error {
    err := {{$dbName}}.CreateInBatches(datas, batch).Error
    if err != nil {
        return err
    }
    return nil
}
{{if ($hasKey)}}
// FindById 根据ID查找 @param id:唯一标识
func (data *{{$structName}}) FindById(id {{$idType}}) error {
    err := {{$dbName}}.Where("id = ?", id).First(&data).Error
    if err != nil {
        return err
    }
    return nil
}

// Update{{$structName}}ById 根据ID查找 @param id:唯一标识
func (data *{{$structName}}) Update{{$structName}}ById(id {{$idType}}) error {
    err := {{$dbName}}.Where("id = ?", id).First(&data).Error
    if err != nil {
        return err
    }
    err = {{$dbName}}.Save(&data).Error
    if err != nil {
        return err
    }
    return nil
}
{{end}}

// Paging{{$structName}} 分页
// @param pageNum: 页数
// @param pageSize: 每页大小
// @param orders: 排序
// @param maps: 条件
// @param args: 值
// maps and args 例如 maps: id = ? and args: 1
func Paging{{$structName}}(pageNum, pageSize int, orders string, maps interface{}, args ...interface{}) ([]*{{$structName}}, error) {
    var (
        ms   []*{{$structName}}
        err  error
        size = pageSize
    )
    if strings.TrimSpace(orders) == "" {
        {{$dbName}} = {{$dbName}}.Order(orders)
    }
    if reflect.ValueOf(maps).IsValid() && maps != "" {
        {{$dbName}} = {{$dbName}}.Where(maps, args...)
    }
    err = {{$dbName}}.Offset(pageNum).Limit(size).Find(&ms).Error
    if err != nil {
        return nil, err
    }
    return ms, nil
}

